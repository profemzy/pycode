services:
  llm-chatbot:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: llm-chatbot
    restart: unless-stopped
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-WARNING}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_BASE=${OPENAI_API_BASE}
      - OPENAI_MODEL=${OPENAI_MODEL:-azure/model-router}
      - OPENAI_TEMPERATURE=${OPENAI_TEMPERATURE:-0.7}
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - PIPENV_VERBOSITY=-1
      - PIPENV_IGNORE_VIRTUALENVS=1
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "python", "health_check.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - llm-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Optional: Redis for caching (production enhancement)
  redis:
    image: redis:7-alpine
    container_name: llm-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - llm-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Optional: Monitoring with Prometheus metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: llm-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - llm-network
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: llm-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - llm-network
    profiles:
      - monitoring

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  llm-network:
    driver: bridge